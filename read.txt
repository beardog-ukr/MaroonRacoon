This project implements an application that decrypts a ciphertext encrypted with Vigenère cipher. Actually there is a set of tools:

- vi_breaker attempts to decode encrypted text without key
- vi_encoder encrypts plain text
- vi_decoder decrypts text with known key
- vi_preprocessor prepares text so that it contains only letters allowed in given alphabet
- vi_chi2decoder attempts to decode encrypted text without key but with known ley length

//-------------------------------------------------

BUILDING

Just use "make all" to build the project. The applications will appear in "build/bin/"

Also "make tests" will make something like unit test app.

//-------------------------------------------------

STRUCTURE

There are following folders:
- src > sources
- build > objects and binaries will appear here. Note the "build/bin/"
- samples > contains plain text examples, frequency information and "alphabet transform" files (will be described below) 
- sh > some scripts tho show how the applications are supposed to be used
- tmp > The shell scripts will create some files here during demo.


//-------------------------------------------------

ALGORITHM

We need to perform two steps to decode message without a key. 
First, we have to guess the length of the key, the application uses "index of coincidence" idea described here: http://www.cs.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-IOC.html
Next, we use guess the key using  χ2 method described here http://www.cs.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-Recover.html

Usual texts contain a lot of symbols so real alphabet size becomes too large. The vi_encoder application will remove all "unknown" symbols from text before encrypting. The vi_preprocessor allows to view this prepared texts (will be described in next section).

Also we need some knowledge about letter frequency in english texts. I've used two tables:
- one for upper case alphabet came from here http://www.cs.mtu.edu/~shene/NSF-4/Tutorial/VIG/Vig-IOC.html#English-Freq-Table
- another one also contains space symbol frequency. I've used it for small case alphabet (englishSmall.txt) and it came from this source: http://www.data-compression.com/english.html

The encoder application keeps new line characters after encoding. That could be a security bug in real life application since it gives attaker some information about message content; but for tutorial purposes it leaves messages readable and makes it easy to check.

//-------------------------------------------------

PREPARE TEXT FOR ENCODING

So at the very first stage we have to remove from the text all symbols that are not included in current alphabet set. This task can be done with vi_preprocessor or vi_encoder will do it during encryption.

Both applications use the same file format to define alphabet. Really it's a simple text file with three lines like

ABCDEFGHIJKLMNOPQRSTUVWXYZ
abcdefghijklmnopqrstuvwxyz
^^^^^^^^^^^^^^^^^^^^^^^^^^

Here:
-- first line lists allowed symbols of the alphabet;
-- second line lists symbols that should be converted to "known" during  preprocessing
-- last row contains "^" and " " symbols. If there is a "^" in the column the transformation mustbe performed; " " means it's a placeholder to keep the columns order.

The project ships two files in "\samples\alphabets" :
- simpleEnglishCaps.txt converts all letters to upper case, no other symbols allowed. That's how it is dome in most articles related to this cipher
- englishSmall.txt converts all letter to lower case and allowes space. This makes converted texts more readable, but the alphabet size becomes 27. Also " " will sometimes appear in encoded texts.

//-------------------------------------------------

SYMBOLS FREQUENCY

There are special files to define frequency of the letters in language.

The format is following. First row contains one ouble value which is default for unknown symbols (really it will not be used since all texts get preprocessed before encryption). All other rows contain a letter and a double value defining it's frequency. There must be exactly one space between letter and value, and no spaces before letter.

Example:
0.0
A 0.0815
B 0.0144
...
Z 0.0008

The project ships two files in "/samples/frequencies/" folder:
- engCapsFreq.txt contains upper case english letters, should be used with simpleEnglishCaps.txt
- engFreq.txt contains lower case letters and space, to be used with englishSmall.txt

//-------------------------------------------------

USAGE

vi_preprocessor accepts following command line options:
-i or --in sets input file name
-o or --out sets file name to store result
-a or --aplh is a name of the file defining alphabet

vi_decoder and vi_encoder both accept similar command line options:
-i or --in sets input file name
-o or --out sets file name to store result
-a or --aplh is a name of the file defining alphabet
-k or --key sets a key string

vi_breaker uses following:
-i or --in sets input file name
-o or --out sets file name to store result
-a or --aplh is a name of the file defining alphabet
-f or --fi is a name of the file defining letter frequency

So all options reqire parameter and all are mandatory.

//-------------------------------------------------

EXAMPLES

There are few example scripts "sh/" folder:

- scenario01 and scenario02 show how encoder/decoder work
- scenario03 uses breaker to decode some short  text
- scenario04 uses breaker to decode longer text
- scenario05 uses short key ("FIRE"), but breaker guesses it as "FIREFIREFIRE". There is no difference really
- scenario06 encrypts a random sequence of letters and fails.



